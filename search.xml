<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>鸽了几天，继续更嗷</title>
      <link href="/2019/09/16/d3/"/>
      <url>/2019/09/16/d3/</url>
      
        <content type="html"><![CDATA[<p>惊了，算了算快鸽了一周了，主要是中秋出去浪了一波<del>屁股有点疼嗷</del>还有就是猛汉世界真好玩。<br>这一周打算把const常量部分先补上，然后就该到第三章string和vector数组啥的。<br>还有就是leetcode，该练的要练的嗷。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两数之和——Leetcode(1)</title>
      <link href="/2019/09/10/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E2%80%94%E2%80%94Leetcode(1)/"/>
      <url>/2019/09/10/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E2%80%94%E2%80%94Leetcode(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">给定 nums = <span class="string">[2, 7, 11, 15]</span>, target = <span class="number">9</span></span><br><span class="line">因为 nums<span class="string">[0]</span> + nums<span class="string">[1]</span> = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 <span class="string">[0, 1]</span></span><br></pre></td></tr></table></figure><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="暴力法。。。"><a href="#暴力法。。。" class="headerlink" title="暴力法。。。"></a>暴力法。。。</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">size</span>=nums.<span class="keyword">size</span>();</span><br><span class="line">    <span class="keyword">int</span> pst=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pst=target-nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="keyword">size</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pst==nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时间288ms。</p><h2 id="蠢方法。。。"><a href="#蠢方法。。。" class="headerlink" title="蠢方法。。。"></a>蠢方法。。。</h2><p>这题做了几遍了，上来第一步又想起了蠢方法，除了暴力搜索外，还想到一种不用map的方法<del>但是感觉有点蠢嗷</del>，对nums先排个序，然后用head，tail俩指针分别指向头尾，如果这俩数之和大于target则tail减一，反之head加一直到指针交叉。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSort(vector&lt;int&gt;&amp; arr,int b[], int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; n - <span class="number">1</span>; <span class="built_in">i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; n - <span class="built_in">i</span> - <span class="number">1</span>; <span class="built_in">j</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[<span class="built_in">j</span>] &gt; arr[<span class="built_in">j</span>+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(arr[<span class="built_in">j</span>],arr[<span class="built_in">j</span>+<span class="number">1</span>]);</span><br><span class="line">                swap(b[<span class="built_in">j</span>],b[<span class="built_in">j</span>+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int b[nums.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;nums.<span class="built_in">size</span>();++<span class="built_in">i</span>)</span><br><span class="line">            b[<span class="built_in">i</span>]=<span class="built_in">i</span>;</span><br><span class="line">        BubbleSort(nums,b,nums.<span class="built_in">size</span>()) ;</span><br><span class="line">        int head=<span class="number">0</span>,tail=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[head]+nums[tail]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> vector &lt;int&gt; &#123;b[head],b[tail]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[head]+nums[tail]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                ++head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                --tail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vector &lt;int&gt; &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后跑出来用时690ms。。。<del>垫底嗷</del>太蠢了比暴力法还慢，不仅是要对数组重新排一遍须，还要有个下表数组一块变。还是用map比较合适。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">       <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; rst;</span><br><span class="line">       <span class="keyword">int</span> obj;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)</span><br><span class="line">       &#123;</span><br><span class="line">           obj=target-nums[i];</span><br><span class="line">           <span class="keyword">if</span>(m.count(obj)!=<span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               rst.push_back(m[obj]);</span><br><span class="line">               rst.push_back(i);</span><br><span class="line">               <span class="keyword">return</span> rst;</span><br><span class="line">           &#125;</span><br><span class="line">           m.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(nums[i],i));</span><br><span class="line">       &#125;</span><br><span class="line">         <span class="keyword">return</span> rst;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>16ms。。。这差距，map方法的化就是对nums遍历一遍，判断当前数字所对应的数字有没有出现在map中，如果存在就返回这两个值，如果没有就把这个数字加入到map。map的格式是(&lt;数字，序号&gt;)，这样可以直接返回在原nums里的序号。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点点小更新，随手记一记嗷</title>
      <link href="/2019/09/09/d2/"/>
      <url>/2019/09/09/d2/</url>
      
        <content type="html"><![CDATA[<p>1.买了个域名绑了一哈，<del>起名字真滴纠结</del>以后能更方便的访问了。<br>2.加了live2d老婆——shizuku，不过不知道为啥换不了人，本来想换miku来着，down下来安装包换不了可惜了。<br>3.加上了浏览人数和浏览次数的插件、代码高亮显示<del>看着稍微专业了一丢丢</del>，感觉不错，慢慢记录。<br>PS：今天的小吊梨汤真好吃嗷</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复合类型：引用和指针——C++Primer(2)</title>
      <link href="/2019/09/09/%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%9A%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88%E2%80%94%E2%80%94C++Primer(2)/"/>
      <url>/2019/09/09/%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%9A%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88%E2%80%94%E2%80%94C++Primer(2)/</url>
      
        <content type="html"><![CDATA[<p>Primer的P.45-53详细介绍了两种复合类型：指针和引用 <del>头大的指针它leile</del> 好久不敲代码了，现在再重新回顾回顾。  </p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用为对象起了另外一个名字，通过将声明符写成&amp;d的形式来定义引用类型，其中d为声明的变量。<br>一旦初始化完成，引用将和它的初始值对象（引用只能绑定在对象上，而不是某个字面值或者表达式的计算结果）一直绑定在一起，所以引用必须要初始化。<br>为引用赋值，实际上就把值赋给了与引用绑定的对象。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1024</span>,i2=<span class="number">2048</span>;     <span class="comment">//i与r都是int</span></span><br><span class="line"><span class="keyword">int</span> &amp;r=i,r2=i2;         <span class="comment">//r为引用，与i绑定在一起，r2为int</span></span><br><span class="line"><span class="keyword">int</span> i3=<span class="number">1024</span>,&amp;ri=i3;     <span class="comment">//i3是int，ri是引用与i3绑定在一起</span></span><br><span class="line"><span class="keyword">int</span> &amp;r3=i3,&amp;r4=i2;      <span class="comment">//r3,r4均为引用</span></span><br></pre></td></tr></table></figure><p><strong>引用即别名：</strong> 引用并非对象，它只是为一个已存在的对象起的另外一个名字。<br>引用的的类型必须与所引用的对象类型一致，但是<strong>1.初始化<font color="red">常量引用</font>时允许使用任意表达式作为初始值。2.允许为一个<font color="red">常量引用</font>绑定非常量的对象、字面值、甚至是表达式，仅仅要求通过该引用不能修改该对象的值。</strong></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>指针是<strong>指向</strong>另一种类型的符合类型。和引用类似，指针页实现了对其他对象的间接访问，但又存在很多不同：<br>1.指针本身就是一个对象，允许对指针进行赋值和拷贝，而且在指针的生命周期中可以现后指向几个不同的对象；<br>2.指针无需在定义时赋值，和其它类型一样，在块作用域内定义指针如果没有被初始化，也将拥有一个不确定的值。<br>指针存放某个对象的地址，要想获取地址需要使用取地址符（&amp;）。指针的类型要和所指向的对象严格匹配。<strong>例外：允许一个<font color="red">指向常量的指针</font>指向一个非常量对象,同引用。</strong>  </p><p>指针的值（即地址）应属于以下四种状态之一：<br>1.指向一个对象。<br>2.只想紧邻对象所占空间的下一个位置。<br>3.空指针，意味着指针没有指向任何对象。<br>4.无效指针，即上述情况之外的其他值。</p><p>如果指针指向了一个对象，则允许使用解引用符（*）来访问对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> varl=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p=varl;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*p;</span><br></pre></td></tr></table></figure><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>空指针不指向任何对象，得到空指针最直接的办法就是用字面值nullptr来初始化指针，也可以用字面值0来初始化。（过去还用用名为NULL的预处理变量来给指针赋值，它的值就是0）<br><strong>建议：初始化所有指针。</strong> 访问一个未初始化的指针相当于访问一个本不存在的位置上的本不存在的对象，如果这个指针所占的内存空间又恰好有内容，而这些内容又恰好被当作某个地址，就很难分辨它到底是合法还是非法的了。<br><strong>赋值永远改变的是等号左边的对象</strong>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *pi=<span class="number">0</span>;      <span class="comment">//pi被初始化，但没有指向任何对象</span></span><br><span class="line">pi=&amp;ival;       <span class="comment">//pi的值被改变，现在指向了ival</span></span><br><span class="line">*pi=<span class="number">0</span>;          <span class="comment">//ival的制备改变，指针pi并没有变</span></span><br></pre></td></tr></table></figure><h2 id="void指针"><a href="#void指针" class="headerlink" title="void指针"></a>void指针</h2><p>void*是一种特殊的指针类型，它可以用于存放任意对象的地址，但是<strong>不能直接操作void*指针所指的对象</strong>，因为我们不知道这个对象到底是什么类型的。</p><h2 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h2><p>常量指针必须初始化，把*放在const之前说明指针是一个常量，即不变的是指针本身而非指向的那个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> currErr=&amp;errNumber;   <span class="comment">//currErr将一直指向errNumber</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h3><p>通过*的个数可以区分指针的级别，即**表示指向指针的指针，***表示指向指针的指针的指针<del>好绕啊</del></p><h3 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">42</span>;       </span><br><span class="line"><span class="keyword">int</span> *p;         <span class="comment">//p是一个指针</span></span><br><span class="line"><span class="keyword">int</span> *&amp;r=p;      <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">r=&amp;i;           <span class="comment">//r引用了一个指针，这里就相当于令p指向i</span></span><br><span class="line">*r=<span class="number">0</span>;           <span class="comment">//对r解引用,相当于*p,得到i,即令i=0</span></span><br></pre></td></tr></table></figure><p><del>这玩意也好绕</del> 要理解r的类型到底是什么，最简单的方法就是<strong>从右往左阅读r的定义</strong>，离变量声明最进的符号对变量类型有最直接的影响。</p>]]></content>
      
      
      <categories>
          
          <category> C++Primer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭博客这一周遇见的一些C++上的小细节——C++Primer(1)</title>
      <link href="/2019/09/07/%E6%90%AD%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%80%E5%91%A8%E9%81%87%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9BC++%E4%B8%8A%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82%E2%80%94%E2%80%94C++Primer(1)/"/>
      <url>/2019/09/07/%E6%90%AD%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%80%E5%91%A8%E9%81%87%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9BC++%E4%B8%8A%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82%E2%80%94%E2%80%94C++Primer(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="i-与-i的区别"><a href="#i-与-i的区别" class="headerlink" title="i++与++i的区别"></a>i++与++i的区别</h1><p>&emsp;很久之前有去查过这俩的区别，时间久了忘得差不多了，大体只记得计算顺序上有差别。在看C++primer 11页的时候正好看到了这个前缀运算符，顺便重新学习了一下。大概是如下两个区别：  </p><h2 id="1-运算开销上"><a href="#1-运算开销上" class="headerlink" title="1.运算开销上"></a>1.运算开销上</h2><p>&emsp;就运算开销来讲，i++会比++i多占用一个寄存器.<br>i++的实质是<code>esp=i;  i=esp+1;</code>会先将i存储在一个临时的寄存器中再对i进行加一操作。<br>++i的实质是<code>i=i+1;</code>直接将i+1作为一个整体进行返回。</p><h2 id="2-判断逻辑上"><a href="#2-判断逻辑上" class="headerlink" title="2.判断逻辑上"></a>2.判断逻辑上</h2><p>&emsp;i++是先进行判断后加一，++i则是先自加后判断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>;</span><br><span class="line">j=i++;</span><br><span class="line">k=++i;</span><br></pre></td></tr></table></figure><p>上述代码执行后结果<code>i=2; j=0; k=2</code><br><strong>细节：在不影响判断逻辑的情况下使用++i占用内存更小，速度更快。</strong></p><h1 id="算数类型在64-32位系统中内存占用问题"><a href="#算数类型在64-32位系统中内存占用问题" class="headerlink" title="算数类型在64/32位系统中内存占用问题"></a>算数类型在64/32位系统中内存占用问题</h1><table><thead><tr><th align="center">system</th><th align="center">char</th><th align="center">short</th><th align="center">int</th><th align="center">long</th><th align="center">float</th><th align="center">double</th><th align="center">long long</th></tr></thead><tbody><tr><td align="center">32位</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">64位</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">8</td><td align="center">4</td><td align="center">8</td><td align="center">8</td></tr></tbody></table><p> -Note：单位byte，换算成位(bit)乘以8<br> 关于long的内存占用，在64位Windows上使用sizeof函数跑出来的结果和int一样占用4个字节 <del>我买了个假电脑嗷</del> ，而在64位Linux系统上是占用8个字节的。查了一些帖子说这个问题是不同的编译器用的数据模型不一样，64位Windows用的是LLP64模型，64位Linux用的是LP64。看师兄们的笔试题，<strong>一般问64位操作系统，默认按8个字节来处理的</strong></p><h1 id="指定字面类型值"><a href="#指定字面类型值" class="headerlink" title="指定字面类型值"></a>指定字面类型值</h1><p>C++Primer p.37，对字符和字符串字面值有：<br>前缀|含义|类型|<br> :-:|:-:|:-:|<br> u|Unicode 16字符|char16_t|<br> U|Unicode 32字符|char32_t|<br> L|宽字符 |wchat_t|<br> u8|UTF-8|char|</p><p> 整数和浮点数类型有：<br>后缀|最小匹配类型 |后缀|类型|<br> :-:|:-:|:-:| :-:|<br> u/U|unsigned|f/F|float|<br> l/L|long|l/L|long double|<br> ll/LL|long long|<br> <strong>细节：单引号’a’表示字符，双引号“abc”表示字符串</strong><br> 下一篇整理整理指针部分嗷</p>]]></content>
      
      
      <categories>
          
          <category> C++Primer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初步建成~👏👏👏</title>
      <link href="/2019/09/07/d1/"/>
      <url>/2019/09/07/d1/</url>
      
        <content type="html"><![CDATA[<p>虽然中间 <del>鸽</del> 学习了一周，总算是把blog搭完了嗷。<br>顺道换了个主题感觉还不错，有空在完善完善。<br>之后开始慢慢记录了嗷。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
